{"version":3,"sources":["game/util.ts","store/game/selectors.ts","game/Dot.tsx","store/game/actions.ts","game/Line.tsx","game/Board.tsx","game/MoveList.tsx","game/TurnInfo.tsx","game/Game.tsx","styles.tsx","game/def.ts","store/game/init.ts","store/index.ts","store/game/reducers.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["getSVGPosition","_ref","x","y","getKeyFromPosition","_ref2","concat","getKeyFromPath","_ref3","_ref4","Object","slicedToArray","a","b","position","getMoves","state","turns","flatMap","turn","moves","getCurrentField","createSelector","fields","length","find","f","Error","path","lastMove","direction","getCurrentTurn","getAllPathsWithCurrentField","paths","currentField","filter","includes","getUsedPathsWithCurrentField","map","getPossibleMoveFields","allPathsWithCurrentField","usedPathsWithCurrentField","difference","connect","props","game","current","isValidMove","field","dispatch","addMove","type","payload","addMoveAction","_ref$position","_useState","useState","_useState2","hover","setHover","isCurrent","_getSVGPosition","svgX","svgY","_getSVGPosition2","svgCX","svgCY","react_default","createElement","Fragment","onClick","r","fill","cx","cy","onMouseEnter","onMouseLeave","pointerEvents","x1","y1","x2","y2","stroke","Line","_ref$color","color","_useMemo","useMemo","_useMemo2","size","borders","_props$size","width","height","viewBox","border","game_Line","key","game_Dot","assign","revertMove","revertTurn","move","JSON","stringify","_ref$turn","player","Game","game_Board","game_TurnInfo","game_MoveList","Player","AppContainer","styled","div","_templateObject","getField","name","String","fromCharCode","initFields","toConsumableArray","range","initBordersAndPaths","partition","_field$position","maybeNearest","pathString","isBehindGatePath","nearestField","_ref5","isBorder","initState","_initBordersAndPaths","_initBordersAndPaths2","WHITE","initialState","reducers","combineReducers","arguments","undefined","action","thisTurn","objectSpread","isSameTurn","p","console","log","slice","nextTurn","BLACK","lastTurn","prevTurn","store","createStore","devToolsEnhancer","App","es","game_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d2499150.chunk.js","sourcesContent":["import { Path, Position } from './def';\n\nexport const getSVGPosition = ({ x, y }: Position): Position => ({\n  x: x * 10 + 5,\n  y: y * 10\n});\n\nexport const getKeyFromPosition = ({ x, y }: Position): string => `${x}_${y}`;\nexport const getKeyFromPath = ([a, b]: Path): string =>\n  `${getKeyFromPosition(a.position)}:${getKeyFromPosition(b.position)}`;\n","import { GameState } from './reducers';\nimport { Field, Path } from '../../game/def';\nimport { createSelector } from 'reselect';\nimport { difference } from 'lodash';\n\nexport const getMoves = (state: GameState) => state.turns.flatMap(turn => turn.moves);\nconst getFields = (state: GameState) => state.fields;\nconst getPaths = (state: GameState) => state.paths;\nconst getTurns = (state: GameState) => state.turns;\n\nexport const getCurrentField = createSelector(\n  [getMoves, getFields],\n  (moves, fields): Field => {\n    if (moves.length === 0) {\n      const find = fields.find(f => f.position.x === 4 && f.position.y === 6);\n      if (!find) {\n        throw new Error('Problem with getting last field');\n      }\n      return find;\n    }\n    if (moves.length === 1) {\n      const find = fields.find(f => f.position.x === 4 && f.position.y === 6);\n      if (!find) {\n        throw new Error('Problem with getting last field');\n      }\n      return moves[0].path[0] === find ? moves[0].path[1] : moves[0].path[0];\n    }\n\n    const lastMove = moves[moves.length - 1];\n    return lastMove.path[lastMove.direction];\n  }\n);\n\nexport const getCurrentTurn = createSelector(\n  [getTurns],\n  turns => {\n    if (!turns.length) {\n      throw new Error('Error getting current turn');\n    }\n    return turns[turns.length - 1];\n  }\n);\n\nexport const getAllPathsWithCurrentField = createSelector(\n  [getCurrentField, getPaths],\n  (currentField, paths) => paths.filter(f => f.includes(currentField))\n);\n\nexport const getUsedPathsWithCurrentField = createSelector(\n  [getMoves, getCurrentField],\n  (moves, currentField) => moves.filter(({ path }) => path.includes(currentField)).map(({ path }) => path)\n);\n\nexport const getPossibleMoveFields = createSelector(\n  [getCurrentField, getAllPathsWithCurrentField, getUsedPathsWithCurrentField],\n  (currentField, allPathsWithCurrentField, usedPathsWithCurrentField) => {\n    return difference(allPathsWithCurrentField, usedPathsWithCurrentField).map(([a, b]) =>\n      a === currentField ? b : a\n    );\n  }\n);\n","import React, { FunctionComponent, useState } from 'react';\nimport { Store } from '../store';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { addMove as addMoveAction } from '../store/game/actions';\nimport { Field, Position } from './def';\nimport { getSVGPosition } from './util';\nimport { getCurrentField, getPossibleMoveFields } from '../store/game/selectors';\n\ninterface Props {\n  position: Position;\n  current: Field;\n  addMove: (field: Field) => void;\n  field: Field;\n  isValidMove: boolean;\n}\n\nconst Dot: FunctionComponent<Props> = ({ position: { x, y }, current, addMove, field, isValidMove }: Props) => {\n  const [hover, setHover] = useState(false);\n  const isCurrent = current.position.x === x && current.position.y === y;\n  const { x: svgX, y: svgY } = getSVGPosition({ x, y });\n  const { x: svgCX, y: svgCY } = getSVGPosition(current.position);\n  return (\n    <>\n      {isValidMove && (\n        <circle\n          onClick={() => {\n            setHover(false);\n            addMove(field);\n          }}\n          r=\"4\"\n          fill=\"transparent\"\n          cx={svgX}\n          cy={svgY}\n          onMouseEnter={() => setHover(true)}\n          onMouseLeave={() => setHover(false)}\n        />\n      )}\n      <circle\n        pointerEvents=\"none\"\n        cx={svgX}\n        cy={svgY}\n        r={hover || isCurrent ? '2' : '0.5'}\n        fill={isCurrent ? 'red' : 'white'}\n      />\n      {hover && isValidMove && <line pointerEvents=\"none\" x1={svgCX} y1={svgCY} x2={svgX} y2={svgY} stroke=\"pink\" />}\n    </>\n  );\n};\n\nconst mapStateToProps = ({ game }: Store, props: Props) => ({\n  current: getCurrentField(game),\n  isValidMove: getPossibleMoveFields(game).includes(props.field)\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  addMove: (field: Field) => dispatch(addMoveAction(field))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Dot);\n","import { Field } from '../../game/def';\n\nexport const REVERT_MOVE = '@lineball/REVERT_MOVE';\nexport const REVERT_TURN = '@lineball/REVERT_TURN';\nexport const ADD_MOVE = '@lineball/ADD_MOVE';\n\nexport const addMove = (field: Field) => ({\n  type: ADD_MOVE,\n  payload: field\n});\n\nexport const revertMove = () => ({\n  type: REVERT_MOVE\n});\n\nexport const revertTurn = () => ({\n  type: REVERT_TURN\n});\n","import React, { useMemo } from 'react';\nimport { Path } from './def';\nimport { getSVGPosition } from './util';\n\ninterface Props {\n  color?: string;\n  path: Path;\n}\n\nconst Line = ({ color = 'white', path }: Props) => {\n  const { x: x1, y: y1 } = useMemo(() => getSVGPosition(path[0].position), path);\n  const { x: x2, y: y2 } = useMemo(() => getSVGPosition(path[1].position), path);\n  return <line pointerEvents=\"none\" x1={x1} y1={y1} x2={x2} y2={y2} stroke={color} />;\n};\n\nexport default Line;\n","import React, { FunctionComponent } from 'react';\nimport Dot from './Dot';\nimport { connect } from 'react-redux';\nimport { Store } from '../store';\nimport { Field, Move, Path, Size } from './def';\nimport { getKeyFromPath } from './util';\nimport { getMoves } from '../store/game/selectors';\nimport Line from './Line';\n\ninterface Props {\n  size: Size;\n  fields: any[];\n  moves: any[];\n  borders: any[];\n}\n\nconst Board: FunctionComponent<Props> = (props: Props) => {\n  const {\n    fields,\n    moves,\n    size: { x, y },\n    borders\n  } = props;\n  return (\n    <svg width={50 * x} height={50 * (y + 1)} viewBox={`0 0 ${10 * x} ${10 * y}`}>\n      {borders.map(border => (\n        <Line key={getKeyFromPath(border)} path={border} color=\"blue\" />\n      ))}\n      {moves.map(({ path }) => (\n        <Line key={getKeyFromPath(path)} path={path} />\n      ))}\n      {fields.map(field => (\n        <Dot {...field} key={`${field.position.x}_${field.position.y}`} field={field} />\n      ))}\n    </svg>\n  );\n};\n\nconst mapStateToProps = ({ game }: Store) => {\n  const { fields, size, borders } = game;\n  return {\n    fields,\n    moves: getMoves(game),\n    size,\n    borders\n  };\n};\n\nexport default connect(mapStateToProps)(Board);\n","import React from 'react';\nimport { Store } from '../store';\nimport { connect } from 'react-redux';\nimport { Move, Turn } from './def';\nimport { getKeyFromPath } from './util';\nimport { Dispatch } from 'redux';\nimport { revertMove as revertMoveAction, revertTurn as revertTurnAction } from '../store/game/actions';\nimport { getCurrentTurn, getMoves } from '../store/game/selectors';\n\ninterface Props {\n  moves: Move[];\n  revertMove: () => void;\n  revertTurn: () => void;\n  turn: Turn;\n}\n\nconst MoveList = ({ moves, revertMove, revertTurn, turn }: Props) => (\n  <>\n    <h3>Moves</h3>\n    {turn.moves.length ? (\n      <button\n        type=\"button\"\n        onClick={() => {\n          revertMove();\n        }}\n      >\n        revert move\n      </button>\n    ) : (\n      moves.length && (\n        <button\n          type=\"button\"\n          onClick={() => {\n            revertTurn();\n          }}\n        >\n          revert turn\n        </button>\n      )\n    )}\n    <ul>\n      {moves.map(move => (\n        <li key={getKeyFromPath(move.path)}>{JSON.stringify(move)}</li>\n      ))}\n    </ul>\n  </>\n);\n\nconst mapStateToProps = ({ game }: Store) => ({\n  moves: getMoves(game),\n  turn: getCurrentTurn(game)\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  revertMove: () => dispatch(revertMoveAction()),\n  revertTurn: () => dispatch(revertTurnAction())\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(MoveList);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Store } from '../store';\nimport { getCurrentTurn } from '../store/game/selectors';\nimport { Turn } from './def';\n\ninterface Props {\n  turn: Turn;\n}\n\nconst TurnInfo = ({ turn: { player, moves } }: Props) => (\n  <>\n    <h3>Turn</h3>\n    <p>player: {player}</p>\n    <p>moves: {JSON.stringify(moves)}</p>\n  </>\n);\n\nconst mapStateToProps = ({ game }: Store) => ({\n  turn: getCurrentTurn(game)\n});\n\nexport default connect(mapStateToProps)(TurnInfo);\n","import React from 'react';\nimport Board from './Board';\nimport MoveList from './MoveList';\nimport TurnInfo from './TurnInfo';\n\nconst Game = () => {\n  return (\n    <>\n      <Board />\n      <TurnInfo />\n      <MoveList />\n    </>\n  );\n};\n\nexport default Game;\n","import styled from 'styled-components';\n\nexport const AppContainer = styled.div`\n  max-width: 960px;\n  margin: auto;\n`;\n\nexport default {\n  AppContainer\n};\n","// Lineball - (domain) game interfaces definition\n\nexport interface Size {\n  x: number;\n  y: number;\n}\n\nexport interface Position {\n  x: number;\n  y: number;\n}\n\nexport interface Field {\n  name: string;\n  position: Position;\n}\n\nexport type Path = [Field, Field];\n\nexport enum Player {\n  WHITE,\n  BLACK\n}\n\nexport interface Move {\n  path: Path;\n  direction: 0 | 1;\n}\n\nexport interface Turn {\n  player: Player;\n  moves: Move[];\n}\n","import { GameState } from './reducers';\nimport { flatMap, partition, range } from 'lodash';\nimport { Field, Move, Path, Player, Position, Turn } from '../../game/def';\nimport { getKeyFromPath } from '../../game/util';\n\nconst getField = ({ x, y }: Position) => ({\n  name: `${String.fromCharCode(65 + y)}${x}`,\n  position: { x, y }\n});\n\nconst initFields = () =>\n  flatMap([\n    ...[0, 12].map(y => range(3, 6).map(x => getField({ x, y }))),\n    ...range(1, 12).map(y => range(0, 9).map(x => getField({ x, y })))\n  ]);\n\nconst isBorder = ([a, b]: [Position, Position]) => {\n  // horizontal\n  if (a.y === b.y) {\n    if ([0, 12].includes(a.y)) {\n      return true;\n    }\n    if ([1, 11].includes(a.y) && (a.x < 3 || a.x >= 5)) {\n      return true;\n    }\n  }\n  // vertical\n  else if (a.x === b.x) {\n    if ([0, 8].includes(a.x)) {\n      return true;\n    }\n    if ([3, 5].includes(a.x) && [0, 11].includes(a.y)) {\n      return true;\n    }\n  }\n  return false;\n};\n\nconst isBehindGatePath = (path: Path): boolean => {\n  const pathString = getKeyFromPath(path);\n  return ['5_0:6_1', '3_0:2_1', '6_11:5_12', '2_11:3_12'].includes(pathString);\n};\n\nconst initBordersAndPaths = (fields: Field[]): [Path[], Path[]] =>\n  partition(\n    flatMap(\n      fields.map(field => {\n        const { x, y } = field.position;\n        const nearestFieldsWithGreaterPosition = fields.filter(\n          maybeNearest =>\n            (([x, x + 1].includes(maybeNearest.position.x) && [y, y + 1].includes(maybeNearest.position.y)) ||\n              (maybeNearest.position.x === x - 1 && maybeNearest.position.y === y + 1)) &&\n            maybeNearest.name !== field.name &&\n            !isBehindGatePath([field, maybeNearest])\n        );\n        return nearestFieldsWithGreaterPosition.map(nearestField => [field, nearestField] as Path);\n      })\n    ),\n    ([a, b]) => isBorder([a.position, b.position])\n  );\n\nconst initTurns = () => [\n  {\n    player: Player.WHITE,\n    moves: []\n  }\n];\n\nconst initState = (): GameState => {\n  const fields = initFields();\n  const [borders, paths] = initBordersAndPaths(fields);\n  return {\n    fields,\n    paths,\n    borders,\n    turns: initTurns(),\n    size: {\n      x: 9,\n      y: 12\n    }\n  };\n};\nexport const initialState: GameState = initState();\n\nexport const tests = {\n  initState,\n  initFields,\n  initBordersAndPaths\n};\n","import { Action as ReduxAction, combineReducers, createStore, Store as ReduxStore } from 'redux';\nimport game, { GameState } from './game/reducers';\n\nimport { devToolsEnhancer } from 'redux-devtools-extension';\n\nexport interface Store extends ReduxStore {\n  game: GameState;\n}\n\nexport interface Action extends ReduxAction {\n  type: string;\n  payload: any;\n}\n\nconst reducers = combineReducers({\n  game\n});\n\nconst store: Store = createStore(reducers, devToolsEnhancer({}));\n\nexport default store;\n","import { ADD_MOVE, REVERT_MOVE, REVERT_TURN } from './actions';\nimport { Action } from '../index';\nimport { Field, Move, Path, Player, Size, Turn } from '../../game/def';\nimport { initialState } from './init';\nimport { getCurrentField, getCurrentTurn } from './selectors';\n\nexport interface GameState {\n  fields: Field[];\n  size: Size;\n  paths: Path[];\n  borders: Path[];\n  turns: Turn[];\n}\n\nexport default (state: GameState = initialState, action: Action): GameState => {\n  switch (action.type) {\n    case ADD_MOVE: {\n      const { payload: field } = action;\n      const currentField = getCurrentField(state);\n      const path = state.paths.find(f => f.includes(field) && f.includes(currentField));\n      if (!path) {\n        throw new Error('Path not found!');\n      }\n      const direction = path[0] === field ? 0 : 1;\n      const thisTurn: Turn = {\n        ...state.turns[state.turns.length - 1],\n        moves: [...state.turns[state.turns.length - 1].moves, { path, direction }]\n      };\n      // is same turn\n      const isSameTurn = !!state.turns\n        .flatMap(turn => turn.moves)\n        .map(move => move.path)\n        .concat(state.borders)\n        .filter((p: Path) => p.includes(field))\n        .map((p: Path) => p).length;\n\n      console.log({ isSameTurn });\n\n      if (isSameTurn) {\n        return {\n          ...state,\n          turns: [...state.turns.slice(0, -1), thisTurn]\n        };\n      }\n      const nextTurn: Turn = {\n        moves: [],\n        player: getCurrentTurn(state).player === Player.WHITE ? Player.BLACK : Player.WHITE\n      };\n      return {\n        ...state,\n        turns: [...state.turns.slice(0, -1), thisTurn, nextTurn]\n      };\n    }\n    case REVERT_MOVE: {\n      const lastTurn = state.turns[state.turns.length - 1];\n      if (lastTurn.moves.length > 0) {\n        console.log('reverting move');\n        /* same turn - revert last move */\n        return {\n          ...state,\n          turns: [\n            ...state.turns.slice(0, -1),\n            {\n              ...lastTurn,\n              moves: [...lastTurn.moves.slice(0, -1)]\n            }\n          ]\n        };\n      }\n      return {\n        ...state\n      };\n    }\n    case REVERT_TURN: {\n      if (state.turns.length > 2) {\n        const currentTurn = state.turns[state.turns.length - 1];\n        if (currentTurn.moves.length > 0) {\n          return {\n            ...state\n          };\n        }\n        const prevTurn = state.turns[state.turns.length - 2];\n        return {\n          ...state,\n          turns: [\n            ...state.turns.slice(0, -2),\n            {\n              ...prevTurn,\n              moves: []\n            }\n          ]\n        };\n      }\n      return {\n        ...state,\n        turns: [\n          {\n            player: Player.WHITE,\n            moves: []\n          }\n        ]\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n};\n","import React, { FunctionComponent, ReactElement } from 'react';\nimport Game from './game/Game';\nimport { AppContainer } from './styles';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nconst App: FunctionComponent = (): ReactElement => (\n  <Provider store={store}>\n    <AppContainer>\n      <Game />\n    </AppContainer>\n  </Provider>\n);\n\nexport default App;\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL((process as { env: { [key: string]: string } }).env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n/* eslint-disable */\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
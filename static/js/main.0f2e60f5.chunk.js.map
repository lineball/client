{"version":3,"sources":["store/game/reducers.ts","game/Dot.tsx","store/game/actions.ts","game/Board.tsx","game/Game.tsx","styles.tsx","store/index.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Node","_ref","position","Object","classCallCheck","this","Edge","initialState","nodes","flatMap","concat","toConsumableArray","map","y","range","x","edges","size","connect","current","game","dispatch","addEdge","edge","type","payload","props","_useState","useState","_useState2","slicedToArray","hover","setHover","_props$position","isCurrent","react_default","a","createElement","Fragment","onClick","r","fill","cx","cy","onMouseEnter","onMouseLeave","pointerEvents","x1","y1","x2","y2","stroke","_ref$game","_props$size","width","height","viewBox","key","node","game_Dot","assign","Game","game_Board","AppContainer","styled","div","_templateObject","reducers","combineReducers","state","arguments","length","undefined","action","objectSpread","store","createStore","devToolsEnhancer","App","es","game_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0f2e60f5.chunk.js","sourcesContent":["import { ADD_EDGE, INITIALIZE_BOARD } from './actions';\nimport { BoardSize } from '../../game/Board';\nimport { flatMap, range } from 'lodash';\nimport { Action } from '../index';\n\ninterface GameContext {\n  nodes: Array<Node>;\n  edges: Array<Edge>;\n  size: BoardSize;\n}\n\ninterface Position {\n  x: number;\n  y: number;\n}\n\nclass Node {\n  position: Position;\n\n  constructor({ position }: any) {\n    this.position = position;\n  }\n}\n\nexport class Edge {\n  position: [Position, Position];\n  constructor(position: [Position, Position]) {\n    this.position = position;\n  }\n}\n\nconst initialState = {\n  nodes: flatMap([\n    ...[0, 12].map(y =>\n      range(3, 6).map(x => new Node({ position: { x: x * 10 + 5, y: y * 10 } }))\n    ),\n    ...range(1, 12).map(y =>\n      range(0, 9).map(x => new Node({ position: { x: x * 10 + 5, y: y * 10 } }))\n    )\n  ]),\n  edges: [],\n  size: {\n    x: 9,\n    y: 12\n  },\n  position: {\n    x: 4 * 10 + 5,\n    y: 6 * 10\n  }\n};\n\nexport default (state: GameContext = initialState, action: Action) => {\n  switch (action.type) {\n    case INITIALIZE_BOARD: {\n      return initialState;\n    }\n    case ADD_EDGE: {\n      const { payload: edge } = action;\n      return {\n        ...state,\n        edges: [...state.edges, edge],\n        position: { ...edge.position[1] }\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n};\n","import React, { useState } from 'react';\nimport { Store } from '../store';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { addEdge } from '../store/game/actions';\nimport { Edge } from '../store/game/reducers';\n\nexport interface Position {\n  x: number;\n  y: number;\n}\n\ninterface Props {\n  position: Position;\n  current: Position;\n  addEdge: Function;\n}\n\nconst Dot = (props: Props) => {\n  const [hover, setHover] = useState(false);\n  const {\n    position: { x, y },\n    current,\n    addEdge\n  } = props;\n  const isCurrent = current.x === x && current.y === y;\n\n  return (\n    <>\n      <circle\n        onClick={() =>\n          addEdge(new Edge([{ x: current.x, y: current.y }, { x, y }]))\n        }\n        r=\"4\"\n        fill=\"transparent\"\n        cx={x}\n        cy={y}\n        onMouseEnter={() => setHover(true)}\n        onMouseLeave={() => setHover(false)}\n      />\n      <circle\n        pointerEvents=\"none\"\n        cx={x}\n        cy={y}\n        r={hover || isCurrent ? '2' : '0.5'}\n        fill={isCurrent ? 'red' : 'white'}\n      />\n      {hover && (\n        <line\n          pointerEvents=\"none\"\n          x1={current.x}\n          y1={current.y}\n          x2={x}\n          y2={y}\n          stroke=\"pink\"\n        />\n      )}\n    </>\n  );\n};\n\nconst mapStateToProps = ({ game: { position } }: Store) => ({\n  current: position\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  addEdge: (edge: Edge) => dispatch(addEdge(edge))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Dot);\n","import { BoardSize } from '../../game/Board';\nimport { Edge } from './reducers';\nexport const INITIALIZE_BOARD = 'lineball@INITIALIZE_BOARD';\nexport const ADD_EDGE = 'lineball@ADD_EDGE';\n\nexport const initBoard = (size: BoardSize) => ({\n  type: INITIALIZE_BOARD,\n  payload: size\n});\n\nexport const addEdge = (edge: Edge) => ({\n  type: ADD_EDGE,\n  payload: edge\n});\n","import React from 'react';\nimport Node from './Dot';\nimport { connect } from 'react-redux';\nimport { Store } from '../store';\n\nexport interface BoardSize {\n  x: number;\n  y: number;\n}\n\ninterface Props {\n  size: BoardSize;\n  nodes: Array<any>;\n  edges: Array<any>;\n}\n\nconst Board = (props: Props) => {\n  const {\n    nodes,\n    edges,\n    size: { x, y }\n  } = props;\n  return (\n    <svg\n      width={50 * x}\n      height={50 * (y + 1)}\n      viewBox={`0 0 ${10 * x} ${10 * y}`}\n    >\n      {edges.map(edge => (\n        <line\n          key={`\n            ${edge.position[0].x}\n            ${edge.position[0].y}\n            ${edge.position[1].x}\n            ${edge.position[1].y}\n          `}\n          pointerEvents=\"none\"\n          x1={edge.position[0].x}\n          y1={edge.position[0].y}\n          x2={edge.position[1].x}\n          y2={edge.position[1].y}\n          stroke=\"white\"\n        />\n      ))}\n      {nodes.map(node => (\n        <Node {...node} key={`${node.position.x}_${node.position.y}`} />\n      ))}\n    </svg>\n  );\n};\n\nconst mapStateToProps = ({ game: { nodes, edges, size } }: Store) => ({\n  nodes,\n  edges,\n  size\n});\n\nexport default connect(mapStateToProps)(Board);\n","import React from 'react';\nimport Board from './Board';\nconst Game = () => {\n  return <Board />;\n};\n\nexport default Game;\n","import styled from 'styled-components';\n\nexport const AppContainer = styled.div`\n  max-width: 960px;\n  margin: auto;\n`;\n\nexport default {\n  AppContainer\n};\n","import {\n  combineReducers,\n  createStore,\n  Store as ReduxStore,\n  Action as ReduxAction\n} from 'redux';\nimport game, { Edge } from './game/reducers';\n\nimport { devToolsEnhancer } from 'redux-devtools-extension';\nimport { BoardSize } from '../game/Board';\nimport { Position } from '../game/Dot';\nexport interface GameContextInterface {\n  nodes: Array<Node>;\n  edges: Array<Edge>;\n  size: BoardSize;\n  addEdge: (position: Position) => void;\n  position: Position;\n}\nexport interface Store extends ReduxStore {\n  game: GameContextInterface;\n}\n\nexport interface Action extends ReduxAction {\n  type: String;\n  payload: any;\n}\n\nconst reducers = combineReducers({\n  game\n});\n\nconst store: Store = createStore(reducers, devToolsEnhancer({}));\n\nexport default store;\n","import React, { FunctionComponent, ReactElement } from 'react';\nimport Game from './game/Game';\nimport { AppContainer } from './styles';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nconst App: FunctionComponent = (): ReactElement => (\n  <Provider store={store}>\n    <AppContainer>\n      <Game />\n    </AppContainer>\n  </Provider>\n);\n\nexport default App;\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n/* eslint-disable */","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
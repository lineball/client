{"version":3,"sources":["game/GameContext.tsx","game/Node.tsx","game/Board.tsx","game/Game.tsx","styles.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Edge","position","Object","classCallCheck","this","Node","_ref","initialState","nodes","edges","size","x","y","addEdge","console","log","GameContext","createContext","props","_useState","useState","_useState2","slicedToArray","hover","setHover","_props$position","react_default","a","createElement","game_GameContext","Consumer","isCurrent","Fragment","onClick","r","fill","cx","cy","onMouseEnter","onMouseLeave","pointerEvents","Board","_ref$size","width","height","viewBox","concat","map","edge","x1","y1","x2","y2","stroke","node","game_Node","assign","key","defaultProps","Game","_ref2","objectSpread","flatMap","toConsumableArray","range","initGameState","setState","prevState","newEdges","state","Provider","value","game_Board","AppContainer","styled","div","_templateObject","App","game_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a9ace5fe.chunk.js","sourcesContent":["import React, { createContext } from 'react';\r\nimport { BoardSize } from './Board';\r\nimport { flatMap, range } from 'lodash';\r\nimport { Position } from './Node';\r\n\r\ninterface NodeConstructor {\r\n  position: Position;\r\n}\r\n\r\nexport class Edge {\r\n  position: [Position, Position];\r\n  constructor(position: [Position, Position]) {\r\n    this.position = position;\r\n  }\r\n}\r\n\r\nclass Node {\r\n  position: Position;\r\n\r\n  constructor({ position }: NodeConstructor) {\r\n    this.position = position;\r\n  }\r\n}\r\n\r\ninterface GameContextInterface {\r\n  nodes: Array<Node>;\r\n  edges: Array<Edge>;\r\n  size: BoardSize;\r\n  addEdge: (position: Position) => void;\r\n  position: Position;\r\n}\r\n\r\nconst initialState: GameContextInterface = {\r\n  nodes: [],\r\n  edges: [],\r\n  size: { x: 0, y: 0 },\r\n  addEdge: position => console.log(position),\r\n  position: { x: 45, y: 60 }\r\n};\r\n\r\nexport const initGameState = ({ x, y, addEdge }: any) => ({\r\n  ...initialState,\r\n  nodes: flatMap([\r\n    ...[0, 12].map(y =>\r\n      range(3, 6).map(x => new Node({ position: { x: x * 10 + 5, y: y * 10 } }))\r\n    ),\r\n    ...range(1, 12).map(y =>\r\n      range(0, 9).map(x => new Node({ position: { x: x * 10 + 5, y: y * 10 } }))\r\n    )\r\n  ]),\r\n  size: {\r\n    x,\r\n    y\r\n  },\r\n  addEdge\r\n});\r\n\r\nconst GameContext = createContext(initialState);\r\nexport default GameContext;\r\n","import React, { useState } from 'react';\r\nimport GameContext from './GameContext';\r\n\r\nexport interface Position {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\ninterface Props {\r\n  position: Position;\r\n}\r\nconst Node = (props: Props) => {\r\n  const [hover, setHover] = useState(false);\r\n  const {\r\n    position: { x, y }\r\n  } = props;\r\n  return (\r\n    <GameContext.Consumer>\r\n      {({ addEdge, position }) => {\r\n        const isCurrent = position.x === x && position.y === y;\r\n        return (\r\n          <>\r\n            <circle\r\n              onClick={() => addEdge({ x, y })}\r\n              r=\"4\"\r\n              fill=\"transparent\"\r\n              cx={x}\r\n              cy={y}\r\n              onMouseEnter={() => setHover(true)}\r\n              onMouseLeave={() => setHover(false)}\r\n            />\r\n            <circle\r\n              pointerEvents=\"none\"\r\n              cx={x}\r\n              cy={y}\r\n              r={hover || isCurrent ? '2' : '0.5'}\r\n              fill={isCurrent ? 'red' : 'white'}\r\n            />\r\n          </>\r\n        );\r\n      }}\r\n    </GameContext.Consumer>\r\n  );\r\n};\r\n\r\nexport default Node;\r\n","import React from 'react';\r\nimport Node from './Node';\r\nimport GameContext from './GameContext';\r\n\r\nexport interface BoardSize {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\ninterface Props {\r\n  size: BoardSize;\r\n}\r\n\r\nconst Board = (props: Props) => {\r\n  return (\r\n    <GameContext.Consumer>\r\n      {({ nodes, edges, size: { x, y } }) => (\r\n        <svg\r\n          width={50 * x}\r\n          height={50 * (y + 1)}\r\n          viewBox={`0 0 ${10 * x} ${10 * y}`}\r\n        >\r\n          {edges.map(edge => (\r\n            <line\r\n              pointerEvents=\"none\"\r\n              x1={edge.position[0].x}\r\n              y1={edge.position[0].y}\r\n              x2={edge.position[1].x}\r\n              y2={edge.position[1].y}\r\n              stroke=\"white\"\r\n            />\r\n          ))}\r\n          {nodes.map(node => (\r\n            <Node {...node} key={`${node.position.x}_${node.position.y}`} />\r\n          ))}\r\n        </svg>\r\n      )}\r\n    </GameContext.Consumer>\r\n  );\r\n};\r\n\r\nBoard.defaultProps = {\r\n  size: {\r\n    x: 3,\r\n    y: 5\r\n  }\r\n};\r\n\r\nexport default Board;\r\n","import React, { useState } from 'react';\r\nimport Board from './Board';\r\nimport GameContext, { initGameState, Edge } from './GameContext';\r\nimport { Position } from './Node';\r\nconst Game = () => {\r\n  const [state, setState] = useState(\r\n    initGameState({\r\n      x: 9,\r\n      y: 12,\r\n      addEdge: ({ x, y }: Position) =>\r\n        setState(prevState => {\r\n          console.log(prevState.position);\r\n          const newEdges = [\r\n            ...prevState.edges,\r\n            new Edge([prevState.position, { x, y }])\r\n          ];\r\n          return {\r\n            ...prevState,\r\n            edges: newEdges,\r\n            position: { x, y }\r\n          };\r\n        })\r\n    })\r\n  );\r\n\r\n  return (\r\n    <GameContext.Provider value={state}>\r\n      <Board />\r\n    </GameContext.Provider>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nexport const AppContainer = styled.div`\r\n  max-width: 960px;\r\n  margin: auto;\r\n`;\r\n","import React, { FunctionComponent, ReactElement } from 'react';\r\nimport Game from './game/Game';\r\nimport { AppContainer } from './styles';\r\n\r\nconst App: FunctionComponent = (): ReactElement => (\r\n  <AppContainer>\r\n    <Game />\r\n  </AppContainer>\r\n);\r\n\r\nexport default App;\r\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n/* eslint-disable */","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["game/def.ts","game/util.ts","store/game/selectors.ts","game/svg/Line.tsx","game/Dot.tsx","store/game/actions.ts","game/Board.tsx","game/MoveList.tsx","game/TurnInfo.tsx","game/Game.tsx","styles.tsx","store/game/init.ts","store/index.ts","store/game/reducers.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Player","getSVGPosition","_ref","x","y","getKeyFromPosition","_ref2","concat","getKeyFromPath","_ref3","_ref4","Object","slicedToArray","a","b","position","getMoves","state","turns","flatMap","turn","moves","getCurrentField","createSelector","fields","length","find","f","Error","path","lastMove","direction","getCurrentTurn","getAllPathsWithCurrentField","paths","currentField","filter","includes","getUsedPathsWithCurrentField","map","getPossibleMoveFields","allPathsWithCurrentField","usedPathsWithCurrentField","difference","memo","_ref$color","color","_useMemo","useMemo","x1","y1","_useMemo2","x2","y2","react_default","createElement","pointerEvents","stroke","connect","game","field","current","isValidMove","dispatch","addMove","type","payload","addMoveAction","_ref$position","_useState","useState","_useState2","hover","setHover","isCurrent","_getSVGPosition","svgX","svgY","Fragment","onClick","r","fill","cx","cy","onMouseEnter","onMouseLeave","svg_Line","size","borders","currentTurn","props","_props$size","width","height","viewBox","border","key","player","WHITE","game_Dot","assign","revertMove","revertTurn","move","JSON","stringify","_ref$turn","Game","game_Board","game_TurnInfo","game_MoveList","AppContainer","styled","div","_templateObject","initField","name","String","fromCharCode","initFields","toConsumableArray","range","initBordersAndPaths","partition","_field$position","maybeNearest","pathString","isBehindGatePath","nearestField","_ref5","isBorder","initState","_initBordersAndPaths","_initBordersAndPaths2","initialState","reducers","combineReducers","arguments","undefined","action","thisTurn","objectSpread","p","slice","nextTurn","BLACK","lastTurn","prevTurn","store","createStore","devToolsEnhancer","App","es","game_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.464967f5.chunk.js","sourcesContent":["// Lineball - (domain) game interfaces definition\n\nexport interface Size {\n  x: number;\n  y: number;\n}\n\nexport interface Position {\n  x: number;\n  y: number;\n}\n\nexport interface Field {\n  name: string;\n  position: Position;\n}\n\nexport type Path = [Field, Field];\n\nexport enum Player {\n  WHITE,\n  BLACK\n}\n\nexport interface Move {\n  path: Path;\n  direction: 0 | 1;\n}\n\nexport interface Turn {\n  player: Player;\n  moves: Move[];\n}\n","import { Path, Position } from './def';\n\nexport const getSVGPosition = ({ x, y }: Position): Position => ({\n  x: x * 10 + 5,\n  y: y * 10\n});\n\nexport const getKeyFromPosition = ({ x, y }: Position): string => `${x}_${y}`;\nexport const getKeyFromPath = ([a, b]: Path): string =>\n  `${getKeyFromPosition(a.position)}:${getKeyFromPosition(b.position)}`;\n","import { GameState } from './reducers';\nimport { Field, Move, Path, Turn } from '../../game/def';\nimport { createSelector } from 'reselect';\nimport { difference } from 'lodash';\n\nexport const getMoves = (state: GameState): Move[] => state.turns.flatMap(turn => turn.moves);\nconst getFields = (state: GameState): Field[] => state.fields;\nconst getPaths = (state: GameState): Path[] => state.paths;\nconst getTurns = (state: GameState): Turn[] => state.turns;\n\nexport const getCurrentField = createSelector(\n  [getMoves, getFields],\n  (moves, fields): Field => {\n    if (moves.length === 0) {\n      const find = fields.find(f => f.position.x === 4 && f.position.y === 6);\n      if (!find) {\n        throw new Error('Problem with getting last field');\n      }\n      return find;\n    }\n    if (moves.length === 1) {\n      const find = fields.find(f => f.position.x === 4 && f.position.y === 6);\n      if (!find) {\n        throw new Error('Problem with getting last field');\n      }\n      return moves[0].path[0] === find ? moves[0].path[1] : moves[0].path[0];\n    }\n\n    const lastMove = moves[moves.length - 1];\n    return lastMove.path[lastMove.direction];\n  }\n);\n\nexport const getCurrentTurn = createSelector(\n  [getTurns],\n  turns => {\n    if (!turns.length) {\n      throw new Error('Error getting current turn');\n    }\n    return turns[turns.length - 1];\n  }\n);\n\nexport const getAllPathsWithCurrentField = createSelector(\n  [getCurrentField, getPaths],\n  (currentField, paths) => paths.filter(f => f.includes(currentField))\n);\n\nexport const getUsedPathsWithCurrentField = createSelector(\n  [getMoves, getCurrentField],\n  (moves, currentField) => moves.filter(({ path }) => path.includes(currentField)).map(({ path }) => path)\n);\n\nexport const getPossibleMoveFields = createSelector(\n  [getCurrentField, getAllPathsWithCurrentField, getUsedPathsWithCurrentField],\n  (currentField, allPathsWithCurrentField, usedPathsWithCurrentField) => {\n    return difference(allPathsWithCurrentField, usedPathsWithCurrentField).map(([a, b]) =>\n      a === currentField ? b : a\n    );\n  }\n);\n","import React, { FunctionComponent, memo, ReactElement, useMemo } from 'react';\nimport { Path } from '../def';\nimport { getSVGPosition } from '../util';\n\ninterface Props {\n  color?: string;\n  path: Path;\n}\n\nconst Line: FunctionComponent<Props> = ({ color = 'white', path }: Props): ReactElement => {\n  const { x: x1, y: y1 } = useMemo(() => getSVGPosition(path[0].position), path);\n  const { x: x2, y: y2 } = useMemo(() => getSVGPosition(path[1].position), path);\n  return <line pointerEvents=\"none\" x1={x1} y1={y1} x2={x2} y2={y2} stroke={color} />;\n};\n\nexport default memo(Line);\n","import React, { FunctionComponent, ReactElement, useState } from 'react';\nimport { Store } from '../store';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { addMove as addMoveAction } from '../store/game/actions';\nimport { Field, Position } from './def';\nimport { getSVGPosition } from './util';\nimport { getCurrentField, getPossibleMoveFields } from '../store/game/selectors';\nimport Line from './svg/Line';\n\ninterface ComponentProps {\n  position: Position;\n  field: Field;\n}\n\ninterface StateProps {\n  isValidMove: boolean;\n  current: Field;\n}\n\ninterface DispatchProps {\n  addMove: (field: Field) => void;\n}\n\ntype Props = ComponentProps & StateProps & DispatchProps;\n\nconst Dot: FunctionComponent<Props> = ({\n  position: { x, y },\n  current,\n  addMove,\n  field,\n  isValidMove\n}: Props): ReactElement => {\n  const [hover, setHover] = useState(false);\n  const isCurrent = current === field;\n  const { x: svgX, y: svgY } = getSVGPosition({ x, y });\n  return (\n    <>\n      {isValidMove && (\n        <circle\n          onClick={() => {\n            setHover(false);\n            addMove(field);\n          }}\n          r=\"4\"\n          fill=\"transparent\"\n          cx={svgX}\n          cy={svgY}\n          onMouseEnter={() => setHover(true)}\n          onMouseLeave={() => setHover(false)}\n        />\n      )}\n      <circle\n        pointerEvents=\"none\"\n        cx={svgX}\n        cy={svgY}\n        r={hover || isCurrent ? '2' : '0.5'}\n        fill={isCurrent ? 'red' : 'white'}\n      />\n      {hover && isValidMove && <Line path={[current, field]} />}\n    </>\n  );\n};\n\nconst mapStateToProps = ({ game }: Store, { field }: { field: Field }): StateProps => ({\n  current: getCurrentField(game),\n  isValidMove: getPossibleMoveFields(game).includes(field)\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch): DispatchProps => ({\n  addMove: (field: Field) => dispatch(addMoveAction(field))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Dot);\n","import { Field } from '../../game/def';\nimport { Action } from '../index';\n\nexport const REVERT_MOVE = '@lineball/REVERT_MOVE';\nexport const REVERT_TURN = '@lineball/REVERT_TURN';\nexport const ADD_MOVE = '@lineball/ADD_MOVE';\n\nexport interface AddMoveAction extends Action {\n  payload: Field;\n}\n\nexport const addMove = (field: Field): AddMoveAction => {\n  const payload: Field = field;\n  return {\n    type: ADD_MOVE,\n    payload\n  };\n};\n\nexport const revertMove = (): Action => ({\n  type: REVERT_MOVE\n});\n\nexport const revertTurn = (): Action => ({\n  type: REVERT_TURN\n});\n","import React, { FunctionComponent, ReactElement } from 'react';\nimport Dot from './Dot';\nimport { connect } from 'react-redux';\nimport { Store } from '../store';\nimport { Field, Move, Path, Player, Size, Turn } from './def';\nimport { getKeyFromPath } from './util';\nimport { getCurrentTurn, getMoves } from '../store/game/selectors';\nimport Line from './svg/Line';\n\ninterface StateProps {\n  size: Size;\n  fields: Field[];\n  moves: Move[];\n  borders: Path[];\n  currentTurn: Turn;\n}\n\ntype Props = StateProps;\n\nconst Board: FunctionComponent<Props> = (props: Props): ReactElement => {\n  const {\n    fields,\n    moves,\n    size: { x, y },\n    borders,\n    currentTurn\n  } = props;\n  return (\n    <svg width={50 * x} height={50 * (y + 1)} viewBox={`0 0 ${10 * x} ${10 * y}`}>\n      {borders.map(border => (\n        <Line key={getKeyFromPath(border)} path={border} color={currentTurn.player === Player.WHITE ? 'blue' : 'red'} />\n      ))}\n      {moves.map(({ path }) => (\n        <Line key={getKeyFromPath(path)} path={path} />\n      ))}\n      {fields.map(field => (\n        <Dot {...field} key={`${field.position.x}_${field.position.y}`} field={field} />\n      ))}\n    </svg>\n  );\n};\n\nconst mapStateToProps = ({ game }: Store): StateProps => {\n  const { fields, size, borders } = game;\n  return {\n    fields,\n    moves: getMoves(game),\n    size,\n    borders,\n    currentTurn: getCurrentTurn(game)\n  };\n};\n\nexport default connect(mapStateToProps)(Board);\n","import React, { FunctionComponent, ReactElement } from 'react';\nimport { Store } from '../store';\nimport { connect } from 'react-redux';\nimport { Move, Turn } from './def';\nimport { getKeyFromPath } from './util';\nimport { Dispatch } from 'redux';\nimport { revertMove as revertMoveAction, revertTurn as revertTurnAction } from '../store/game/actions';\nimport { getCurrentTurn, getMoves } from '../store/game/selectors';\n\ninterface StateProps {\n  moves: Move[];\n  turn: Turn;\n}\n\ninterface DispatchProps {\n  revertMove: () => void;\n  revertTurn: () => void;\n}\n\ntype Props = StateProps & DispatchProps;\n\nconst MoveList: FunctionComponent<Props> = ({ moves, revertMove, revertTurn, turn }: Props): ReactElement => (\n  <>\n    <h3>Moves</h3>\n    {turn.moves.length ? (\n      <button\n        type=\"button\"\n        onClick={() => {\n          revertMove();\n        }}\n      >\n        revert move\n      </button>\n    ) : (\n      moves.length && (\n        <button\n          type=\"button\"\n          onClick={() => {\n            revertTurn();\n          }}\n        >\n          revert turn\n        </button>\n      )\n    )}\n    <ul>\n      {moves.map(move => (\n        <li key={getKeyFromPath(move.path)}>{JSON.stringify(move)}</li>\n      ))}\n    </ul>\n  </>\n);\n\nconst mapStateToProps = ({ game }: Store): StateProps => ({\n  moves: getMoves(game),\n  turn: getCurrentTurn(game)\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch): DispatchProps => ({\n  revertMove: () => dispatch(revertMoveAction()),\n  revertTurn: () => dispatch(revertTurnAction())\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(MoveList);\n","import React, { FunctionComponent, ReactElement } from 'react';\nimport { connect } from 'react-redux';\nimport { Store } from '../store';\nimport { getCurrentTurn } from '../store/game/selectors';\nimport { Turn } from './def';\n\ninterface StateProps {\n  turn: Turn;\n}\n\nconst TurnInfo: FunctionComponent<StateProps> = ({ turn: { player, moves } }: StateProps): ReactElement => (\n  <>\n    <h3>Turn</h3>\n    <p>player: {player}</p>\n    <p>moves: {JSON.stringify(moves)}</p>\n  </>\n);\n\nconst mapStateToProps = ({ game }: Store): StateProps => ({\n  turn: getCurrentTurn(game)\n});\n\nexport default connect(mapStateToProps)(TurnInfo);\n","import React, { FunctionComponent, ReactElement } from 'react';\nimport Board from './Board';\nimport MoveList from './MoveList';\nimport TurnInfo from './TurnInfo';\n\nconst Game: FunctionComponent<{}> = (): ReactElement => {\n  return (\n    <>\n      <Board />\n      <TurnInfo />\n      <MoveList />\n    </>\n  );\n};\n\nexport default Game;\n","import styled from 'styled-components';\n\nexport const AppContainer = styled.div`\n  max-width: 960px;\n  margin: auto;\n`;\n\nexport default {\n  AppContainer\n};\n","import { GameState } from './reducers';\nimport { flatMap, partition, range } from 'lodash';\nimport { Field, Path, Player, Position, Turn } from '../../game/def';\nimport { getKeyFromPath } from '../../game/util';\n\nconst initField = ({ x, y }: Position): Field => ({\n  name: `${String.fromCharCode(65 + y)}${x}`,\n  position: { x, y }\n});\n\nconst initFields = (): Field[] =>\n  flatMap([\n    ...[0, 12].map(y => range(3, 6).map(x => initField({ x, y }))),\n    ...range(1, 12).map(y => range(0, 9).map(x => initField({ x, y })))\n  ]);\n\nconst isBorder = ([a, b]: [Position, Position]): boolean => {\n  // horizontal\n  if (a.y === b.y) {\n    if ([0, 12].includes(a.y)) {\n      return true;\n    }\n    if ([1, 11].includes(a.y) && (a.x < 3 || a.x >= 5)) {\n      return true;\n    }\n  }\n  // vertical\n  else if (a.x === b.x) {\n    if ([0, 8].includes(a.x)) {\n      return true;\n    }\n    if ([3, 5].includes(a.x) && [0, 11].includes(a.y)) {\n      return true;\n    }\n  }\n  return false;\n};\n\nconst isBehindGatePath = (path: Path): boolean => {\n  const pathString = getKeyFromPath(path);\n  return ['5_0:6_1', '3_0:2_1', '6_11:5_12', '2_11:3_12'].includes(pathString);\n};\n\nconst initBordersAndPaths = (fields: Field[]): [Path[], Path[]] =>\n  partition(\n    flatMap(\n      fields.map(field => {\n        const { x, y } = field.position;\n        const nearestFieldsWithGreaterPosition = fields.filter(\n          maybeNearest =>\n            (([x, x + 1].includes(maybeNearest.position.x) && [y, y + 1].includes(maybeNearest.position.y)) ||\n              (maybeNearest.position.x === x - 1 && maybeNearest.position.y === y + 1)) &&\n            maybeNearest.name !== field.name &&\n            !isBehindGatePath([field, maybeNearest])\n        );\n        return nearestFieldsWithGreaterPosition.map(nearestField => [field, nearestField] as Path);\n      })\n    ),\n    ([a, b]) => isBorder([a.position, b.position])\n  );\n\nconst initTurns = (): Turn[] => [\n  {\n    player: Player.WHITE,\n    moves: []\n  }\n];\n\nconst initState = (): GameState => {\n  const fields = initFields();\n  const [borders, paths] = initBordersAndPaths(fields);\n  return {\n    fields,\n    paths,\n    borders,\n    turns: initTurns(),\n    size: {\n      x: 9,\n      y: 12\n    }\n  };\n};\nexport const initialState: GameState = initState();\n\nexport const testOnly = {\n  initState,\n  initFields,\n  initBordersAndPaths\n};\n","import { Action as ReduxAction, combineReducers, createStore, Store as ReduxStore } from 'redux';\nimport game, { GameState } from './game/reducers';\n\nimport { devToolsEnhancer } from 'redux-devtools-extension';\n\nexport interface Store extends ReduxStore {\n  game: GameState;\n}\n\nexport interface Action extends ReduxAction {\n  type: string;\n}\n\nconst reducers = combineReducers({\n  game\n});\n\nconst store: Store = createStore(reducers, devToolsEnhancer({}));\n\nexport default store;\n","import { ADD_MOVE, AddMoveAction, REVERT_MOVE, REVERT_TURN } from './actions';\nimport { Action } from '../index';\nimport { Field, Path, Player, Size, Turn } from '../../game/def';\nimport { initialState } from './init';\nimport { getCurrentField, getCurrentTurn } from './selectors';\n\nexport interface GameState {\n  fields: Field[];\n  size: Size;\n  paths: Path[];\n  borders: Path[];\n  turns: Turn[];\n}\n\nexport default (state: GameState = initialState, action: Action): GameState => {\n  switch (action.type) {\n    case ADD_MOVE: {\n      const { payload: field } = action as AddMoveAction;\n      const currentField = getCurrentField(state);\n      const path = state.paths.find(f => f.includes(field) && f.includes(currentField));\n      if (!path) {\n        throw new Error('Path not found!');\n      }\n      const direction = path[0] === field ? 0 : 1;\n      const thisTurn: Turn = {\n        ...state.turns[state.turns.length - 1],\n        moves: [...state.turns[state.turns.length - 1].moves, { path, direction }]\n      };\n      // is same turn\n      const isSameTurn = !!state.turns\n        .flatMap(turn => turn.moves)\n        .map(move => move.path)\n        .concat(state.borders)\n        .filter((p: Path) => p.includes(field))\n        .map((p: Path) => p).length;\n\n      if (isSameTurn) {\n        return {\n          ...state,\n          turns: [...state.turns.slice(0, -1), thisTurn]\n        };\n      }\n      const nextTurn: Turn = {\n        moves: [],\n        player: getCurrentTurn(state).player === Player.WHITE ? Player.BLACK : Player.WHITE\n      };\n      return {\n        ...state,\n        turns: [...state.turns.slice(0, -1), thisTurn, nextTurn]\n      };\n    }\n    case REVERT_MOVE: {\n      const lastTurn = state.turns[state.turns.length - 1];\n      if (lastTurn.moves.length > 0) {\n        return {\n          ...state,\n          turns: [\n            ...state.turns.slice(0, -1),\n            {\n              ...lastTurn,\n              moves: [...lastTurn.moves.slice(0, -1)]\n            }\n          ]\n        };\n      }\n      return {\n        ...state\n      };\n    }\n    case REVERT_TURN: {\n      if (state.turns.length > 2) {\n        const currentTurn = state.turns[state.turns.length - 1];\n        if (currentTurn.moves.length > 0) {\n          return {\n            ...state\n          };\n        }\n        const prevTurn = state.turns[state.turns.length - 2];\n        return {\n          ...state,\n          turns: [\n            ...state.turns.slice(0, -2),\n            {\n              ...prevTurn,\n              moves: []\n            }\n          ]\n        };\n      }\n      return {\n        ...state,\n        turns: [\n          {\n            player: Player.WHITE,\n            moves: []\n          }\n        ]\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n};\n","import React, { FunctionComponent, ReactElement } from 'react';\nimport Game from './game/Game';\nimport { AppContainer } from './styles';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nconst App: FunctionComponent = (): ReactElement => (\n  <Provider store={store}>\n    <AppContainer>\n      <Game />\n    </AppContainer>\n  </Provider>\n);\n\nexport default App;\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL((process as { env: { [key: string]: string } }).env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n/* eslint-disable */\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}